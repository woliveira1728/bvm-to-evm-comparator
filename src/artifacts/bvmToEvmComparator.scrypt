
contract BvmToEvmComparator {
  @state int count;
  @state bytes hash;
  bytes __scrypt_ts_ctx_hashoutputs;
  int __scrypt_ts_ctx_value;
  constructor(int count, bytes hash) {
    this.count = count;
    this.hash = hash;
  }
  public function increment(SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    this.count++;
    int amount = this.__scrypt_ts_ctx_value;
    bytes output = this.buildStateOutput(amount);
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(output));
  }
  public function unlock(bytes message, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(sha256(message) == this.hash);
  }
  function buildStateOutput(int amount) : bytes {  return Utils.buildOutput(this.getStateScript(), amount);}
}