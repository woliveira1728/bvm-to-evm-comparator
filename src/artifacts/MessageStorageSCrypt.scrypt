
contract MessageStorageSCrypt {
  @state bytes message;
  PubKey ownerPubKey;
  bytes __scrypt_ts_ctx_hashoutputs;
  int __scrypt_ts_ctx_value;
  constructor(bytes message, PubKey ownerPubKey) {
    this.message = message;
    this.ownerPubKey = ownerPubKey;
  }
  public function setMessage(bytes newMessage, Sig sig, SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'43')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(checkSig(sig, this.ownerPubKey));
    this.message = newMessage;
    int amount = this.__scrypt_ts_ctx_value;
    bytes output = this.buildStateOutput(amount);
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(output));
  }
  function buildStateOutput(int amount) : bytes {  return Utils.buildOutput(this.getStateScript(), amount);}
}